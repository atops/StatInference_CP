library(gridExtra)
library(scales)
pYear = 2015
# Connect to SQLite database
conn <- dbConnect(RSQLite::SQLite(), "c:/users/alan.toppen/code/kha/projects.db")
# Get Job Starts Data from jobstarts table
sql <- paste("select * from jobstarts where Year =", pYear, "and Ptd_Job_Start <> 0")
js_res <- dbSendQuery(conn, sql)
jsdf <- tbl_df(dbFetch(js_res, n=-1))
pPer = max(jsdf$Period) #  The latest period. Used to prorate YTD job start goals.
# No separate goals for KHMI. Consolidate with main reporting unit
#   change to dplyr: mutate ifelse
jsdf$Org_Name[jsdf$Org_Name=="CHICAGO - KHMI"] <- "CHICAGO"
jsdf$Org_Name[jsdf$Org_Name=="TRIANGLE - CARY - KHMI"] <- "TRIANGLE - CARY"
jsdf$Org_Name[jsdf$Org_Name=="ATLANTA - KHMI"] <- "ATLANTA"
jsdf$Org_Name[jsdf$Org_Name=="SEE 13.00.320"] <- "WPB FACT"
js_ptd <- jsdf %>%
select(Region_Name, Org_Name, Ptd_Job_Start) %>%
mutate_each(funs(as.numeric), starts_with("Ptd_")) %>%
group_by(Region_Name, Org_Name) %>%
summarise(jobstarts = sum(Ptd_Job_Start, na.rm=TRUE)) %>%
arrange(Region_Name, Org_Name)
# Get Job Start Goals from Org_JS_Goals Table
sql <- paste("select * from Org_JS_Goals where Year =", pYear)
g_res <- dbSendQuery(conn, sql)
g_df <- tbl_df(dbFetch(g_res, n=-1))
dbDisconnect(conn)
goals <- g_df %>%
mutate_each(funs(as.numeric), Year, JS_Goal) %>%
rename(JS_Goal_Annual = JS_Goal) %>%
mutate(JS_Goal = JS_Goal_Annual * pPer/12) %>%
arrange(Region_Name, Org_Name) %>%
group_by(Region_Name, Org_Name) %>%
summarise(JS_Goal=sum(JS_Goal))
# Join data sets and make final edits to prepare for plotting
plt <- full_join(js_ptd, goals, by=c("Region_Name"="Region_Name", "Org_Name"="Org_Name")) %>%
mutate(delta = jobstarts - JS_Goal) %>%
mutate(jobstarts = ifelse(is.na(jobstarts),0,jobstarts)) %>%
mutate(delta = ifelse(is.na(delta),0,delta)) %>%
filter(jobstarts > 0 | JS_Goal > 0) %>%
arrange(Region_Name, desc(Org_Name))
# Subset data to show positive JS deltas (actual vs goal) in green or red
posplt <- plt %>% filter(delta>0)
negplt <- plt %>% filter(delta<0)
zeroplt <- plt %>% filter(delta==0)
# Split by region to color bars by region
rdf <- split(plt, plt$Region_Name)
# shading the background for each region. From website. Needs to be tailored.
# Not sure whether this can be done with discrete axis variables.
#rects <- data.frame(xstart = seq(0,80,20), xend = seq(20,100,20), col = letters[1:5])
#geom_rect(data = rects,
#	aes(xmin = xstart, xmax = xend, ymin = -Inf, ymax = Inf, fill = col),
#	alpha = 0.4) +
# Create plot of Job Starts by Org with Goals as shaded bars in the background.
p1 <- ggplot() +
coord_cartesian() +
scale_x_discrete(limits=plt$Org_Name) +
scale_y_continuous(labels=dollar) +
xlab("") +
ylab("") +
geom_bar(data=plt, mapping=aes(x=Org_Name, y=JS_Goal),
width=0.8, stat="identity", fill="grey") +
geom_bar(data=plt, mapping=aes(x=Org_Name, y=jobstarts),
width=0.4, stat="identity", fill="#A20C33") +
geom_bar(data=rdf$FIRMWIDE, mapping=aes(x=Org_Name, y=jobstarts),
width=0.4, stat="identity", fill="#3A617A") +
geom_bar(data=rdf[["MID-AMERICA"]], mapping=aes(x=Org_Name, y=jobstarts),
width=0.4, stat="identity", fill="#3A617A") +
geom_bar(data=rdf$SOUTHEAST, mapping=aes(x=Org_Name, y=jobstarts),
width=0.4, stat="identity", fill="#3A617A") +
theme(axis.text.y = element_text(size=8)) +
coord_flip()
# Plot delta between YTD Job Starts and YTD Goals as point and stem plot.
p2 <- ggplot() +
coord_cartesian() +
scale_x_discrete(limits=plt$Org_Name) +
scale_y_continuous(labels=dollar) +
xlab("") +
ylab("") +
geom_linerange(data=posplt, mapping=aes(x=Org_Name, ymin=0, ymax=delta),
size=0.5, stat="identity", colour="#1A9641") +
geom_point(data=posplt, mapping=aes(x=Org_Name, y=delta),
size=2.5, stat="identity", colour="#1A9641") +
geom_linerange(data=negplt, mapping=aes(x=Org_Name, ymin=0, ymax=delta),
size=0.5, stat="identity", colour="#D7191C") +
geom_point(data=negplt, mapping=aes(x=Org_Name, y=delta),
size=2.5, stat="identity", colour="#D7191C") +
geom_point(data=zeroplt, mapping=aes(x=Org_Name, y=delta),
size=2.5, stat="identity", colour="gray") +
theme(axis.text.y = element_text(size=8)) +
coord_flip()
# Display both plots side-by-side
grid.arrange(p1, p2, ncol=2, main="\nYTD Job Starts vs. Goals")
#labels=abbreviate,
#pr_res <- dbSendQuery(conn, "select * from profitability")
#prdf <- tbl_df(dbFetch(pr_res, n=-1))
#prdf <- separate(prdf, Pd_Year, into=c("Period", "Year"), sep=" / ", remove=FALSE, convert=TRUE, extra="drop")
#
#pr_ptd <- prdf %>%
#	select(Year, Period, Region_Name, Org_Name, Proj_Mgr_Name, Proj_Id, Proj_Name,
#		Dir_Client_Name, End_Client_Owner_Name, starts_with("Ptd_")) %>%
#	mutate_each(funs(as.numeric), starts_with("Ptd"))
#pr_ytd <- prdf %>%
#	select(Year, Period, Region_Name, Org_Name, Proj_Mgr_Name, Proj_Id, Proj_Name,
#		Dir_Client_Name, End_Client_Owner_Name, starts_with("Ytd_")) %>%
#	mutate_each(funs(as.numeric), starts_with("Ytd"))
#pr_itd <- prdf %>%
#	select(Year, Period, Region_Name, Org_Name, Proj_Mgr_Name, Proj_Id, Proj_Name,
#		Dir_Client_Name, End_Client_Owner_Name, starts_with("Itd_")) %>%
#	mutate_each(funs(as.numeric), starts_with("Itd")) %>%
#	group_by(Proj_Id) %>%
#	filter(Year==max(Year) & Period==max(Period)) %>%
#	arrange(Year, Period, Region_Name, Org_Name, Proj_Mgr_Name, Proj_Id)
#	mutate(Project_Start_Date=as.Date(Project_Start_Date, format="%Y-%m-%d %H:%M:%S")) %>%
#	select(Year, Period, Project_Id, Region_Name, Org_Name, PM_Name,
#		Direct_Client_Name, End_Client_Owner_Name,
#		Project_Start_Date, contains("Ptd_")) %>%
p1 <- ggplot() +
coord_cartesian() +
scale_x_discrete(limits=plt$Org_Name) +
scale_y_continuous(labels=dollar) +
xlab("YTD Job Starts shown against YTD Goal") +
ylab("") +
geom_bar(data=plt, mapping=aes(x=Org_Name, y=JS_Goal),
width=0.8, stat="identity", fill="grey") +
geom_bar(data=plt, mapping=aes(x=Org_Name, y=jobstarts),
width=0.4, stat="identity", fill="#A20C33") +
geom_bar(data=rdf$FIRMWIDE, mapping=aes(x=Org_Name, y=jobstarts),
width=0.4, stat="identity", fill="#3A617A") +
geom_bar(data=rdf[["MID-AMERICA"]], mapping=aes(x=Org_Name, y=jobstarts),
width=0.4, stat="identity", fill="#3A617A") +
geom_bar(data=rdf$SOUTHEAST, mapping=aes(x=Org_Name, y=jobstarts),
width=0.4, stat="identity", fill="#3A617A") +
theme(axis.text.y = element_text(size=8)) +
coord_flip()
# Plot delta between YTD Job Starts and YTD Goals as point and stem plot.
p2 <- ggplot() +
coord_cartesian() +
scale_x_discrete(limits=plt$Org_Name) +
scale_y_continuous(labels=dollar) +
xlab("YTD Job Starts above/below YTD Goal") +
ylab("") +
geom_linerange(data=posplt, mapping=aes(x=Org_Name, ymin=0, ymax=delta),
size=0.5, stat="identity", colour="#1A9641") +
geom_point(data=posplt, mapping=aes(x=Org_Name, y=delta),
size=2.5, stat="identity", colour="#1A9641") +
geom_linerange(data=negplt, mapping=aes(x=Org_Name, ymin=0, ymax=delta),
size=0.5, stat="identity", colour="#D7191C") +
geom_point(data=negplt, mapping=aes(x=Org_Name, y=delta),
size=2.5, stat="identity", colour="#D7191C") +
geom_point(data=zeroplt, mapping=aes(x=Org_Name, y=delta),
size=2.5, stat="identity", colour="gray") +
theme(axis.text.y = element_text(size=8)) +
coord_flip()
# Display both plots side-by-side
grid.arrange(p1, p2, ncol=2, main="\nYTD Job Starts vs. Goals")
p1 <- ggplot() +
coord_cartesian() +
scale_x_discrete(limits=plt$Org_Name) +
scale_y_continuous(labels=dollar) +
xlab("") +
ylab("YTD Job Starts shown against YTD Goal") +
geom_bar(data=plt, mapping=aes(x=Org_Name, y=JS_Goal),
width=0.8, stat="identity", fill="grey") +
geom_bar(data=plt, mapping=aes(x=Org_Name, y=jobstarts),
width=0.4, stat="identity", fill="#A20C33") +
geom_bar(data=rdf$FIRMWIDE, mapping=aes(x=Org_Name, y=jobstarts),
width=0.4, stat="identity", fill="#3A617A") +
geom_bar(data=rdf[["MID-AMERICA"]], mapping=aes(x=Org_Name, y=jobstarts),
width=0.4, stat="identity", fill="#3A617A") +
geom_bar(data=rdf$SOUTHEAST, mapping=aes(x=Org_Name, y=jobstarts),
width=0.4, stat="identity", fill="#3A617A") +
theme(axis.text.y = element_text(size=8)) +
coord_flip()
# Plot delta between YTD Job Starts and YTD Goals as point and stem plot.
p2 <- ggplot() +
coord_cartesian() +
scale_x_discrete(limits=plt$Org_Name) +
scale_y_continuous(labels=dollar) +
xlab("") +
ylab("YTD Job Starts above/below YTD Goal") +
geom_linerange(data=posplt, mapping=aes(x=Org_Name, ymin=0, ymax=delta),
size=0.5, stat="identity", colour="#1A9641") +
geom_point(data=posplt, mapping=aes(x=Org_Name, y=delta),
size=2.5, stat="identity", colour="#1A9641") +
geom_linerange(data=negplt, mapping=aes(x=Org_Name, ymin=0, ymax=delta),
size=0.5, stat="identity", colour="#D7191C") +
geom_point(data=negplt, mapping=aes(x=Org_Name, y=delta),
size=2.5, stat="identity", colour="#D7191C") +
geom_point(data=zeroplt, mapping=aes(x=Org_Name, y=delta),
size=2.5, stat="identity", colour="gray") +
theme(axis.text.y = element_text(size=8)) +
coord_flip()
# Display both plots side-by-side
grid.arrange(p1, p2, ncol=2, main="\nYTD Job Starts vs. Goals")
grid.arrange(p1, p2, ncol=2, main=paste0("\n", pYear," YTD Job Starts vs. Goals")
grid.arrange(p1, p2, ncol=2, main=paste0("\n", pYear," YTD Job Starts vs. Goals")
grid.arrange(p1, p2, ncol=2, main=paste0("\n", pYear," YTD Job Starts vs. Goals"))
p1 <- ggplot() +
coord_cartesian() +
scale_x_discrete(limits=plt$Org_Name) +
scale_y_continuous(labels=dollar) +
xlab("") +
ylab("\nYTD Job Starts shown against YTD Goal") +
geom_bar(data=plt, mapping=aes(x=Org_Name, y=JS_Goal),
width=0.8, stat="identity", fill="grey") +
geom_bar(data=plt, mapping=aes(x=Org_Name, y=jobstarts),
width=0.4, stat="identity", fill="#A20C33") +
geom_bar(data=rdf$FIRMWIDE, mapping=aes(x=Org_Name, y=jobstarts),
width=0.4, stat="identity", fill="#3A617A") +
geom_bar(data=rdf[["MID-AMERICA"]], mapping=aes(x=Org_Name, y=jobstarts),
width=0.4, stat="identity", fill="#3A617A") +
geom_bar(data=rdf$SOUTHEAST, mapping=aes(x=Org_Name, y=jobstarts),
width=0.4, stat="identity", fill="#3A617A") +
theme(axis.text.y = element_text(size=8)) +
coord_flip()
# Plot delta between YTD Job Starts and YTD Goals as point and stem plot.
p2 <- ggplot() +
coord_cartesian() +
scale_x_discrete(limits=plt$Org_Name) +
scale_y_continuous(labels=dollar) +
xlab("") +
ylab("\nYTD Job Starts above/below YTD Goal") +
geom_linerange(data=posplt, mapping=aes(x=Org_Name, ymin=0, ymax=delta),
size=0.5, stat="identity", colour="#1A9641") +
geom_point(data=posplt, mapping=aes(x=Org_Name, y=delta),
size=2.5, stat="identity", colour="#1A9641") +
geom_linerange(data=negplt, mapping=aes(x=Org_Name, ymin=0, ymax=delta),
size=0.5, stat="identity", colour="#D7191C") +
geom_point(data=negplt, mapping=aes(x=Org_Name, y=delta),
size=2.5, stat="identity", colour="#D7191C") +
geom_point(data=zeroplt, mapping=aes(x=Org_Name, y=delta),
size=2.5, stat="identity", colour="gray") +
theme(axis.text.y = element_text(size=8)) +
coord_flip()
# Display both plots side-by-side
grid.arrange(p1, p2, ncol=2, main=paste0("\n", pYear," YTD Job Starts vs. Goals"))
library(RSQLite)
library(dplyr)
library(tidyr)
library(ggplot2)
library(grid)
library(gridExtra)
library(scales)
conn <- dbConnect(RSQLite::SQLite(), "c:/users/alan.toppen/code/kha/projects.db")
dbListTables(conn)
sql <- "select * from Itd_profitability"
res <- dbSendQuery(conn, sql)
df <- dbFetch(res, n=-1) %>% tbl_df
df
clients <- read.table(file="c:/users/alan.toppen/code/kha/clients.txt", header = TRUE, sep = "||")
clients <- read.table(file="c:/users/alan.toppen/code/kha/clients.txt", header = TRUE, sep = "||")
clients <- read.table(file="c:/users/alan.toppen/code/kha/clients.txt", header = TRUE, sep = "|")
clients
library(data.table)
install.packages("data.table")
library(data.table)
clients <- fread("c:/users/alan.toppen/code/kha/clients.txt")
clients
clients <- fread("c:/users/alan.toppen/code/kha/clients.txt")
clients <- read.table(file="c:/users/alan.toppen/code/kha/clients.txt", header = TRUE, sep = "|")
clients
df
df %>% filter(Dir_Client_Name %in% clients$Client)
install.packages("xlsx")
library(xlsx)
install.packages("rJava")
library(xlsx)
library(xlsx)
oncalls <- read.xlsx("C:/Users/alan.toppen/OneDrive/Documents/On-Call Contracts.xlsx", sheetName = "On-Calls (Master)")
oncalls
oncalls <- oncalls %>% tbl_df
oncalls
oncalls$Client
df %>% filter(Dir_Client_Name %in% oncalls$Client)
savehistory("~/Code/KHA/rhistory.log")
df %>%
filter(Dir_Client_Name %in% oncalls$Client) %>%
arrange(Proj_Id, YYYYMM, Proj_Mgr_Name)
df %>%
filter(Dir_Client_Name %in% oncalls$Client) %>%
arrange(Dir_Client_Name, Proj_Id, YYYYMM, Proj_Mgr_Name)
df %>%
filter(Dir_Client_Name %in% oncalls$Client) %>%
arrange(Dir_Client_Name, Proj_Id, YYYYMM, Proj_Mgr_Name) %>% View
ondf <- df %>%
filter(Dir_Client_Name %in% oncalls$Client) %>%
arrange(Dir_Client_Name, Proj_Id, YYYYMM, Proj_Mgr_Name) %>% View
ondf
ondf <- df %>%
filter(Dir_Client_Name %in% oncalls$Client) %>%
arrange(Dir_Client_Name, Proj_Id, YYYYMM, Proj_Mgr_Name)
ondf
write.xlsx(ondf, "C:/Users/alan.toppen/OneDrive/Documents/On-Call Contracts.xlsx", sheetName = "Projects", showNA = FALSE)
write.xlsx(ondf, "C:/Users/alan.toppen/OneDrive/Documents/On-Call Contracts.xlsx", sheetName = "Projects", showNA = FALSE)
write.xlsx2(ondf, "C:/Users/alan.toppen/Documents/Temp/On-Call Contracts.xlsx", sheetName = "Projects", showNA = FALSE, append = TRUE)
write.xlsx2(ondf, "C:/Users/alan.toppen/Documents/Temp/On-Call Contracts.xlsx", sheetName = "Projects2", showNA = FALSE, append = TRUE)
sql <- "select * from Itd_jobstarts"
res <- dbSendQuery(conn, sql)
df <- dbFetch(res, n=-1) %>% tbl_df
df
ondf %>%
filter(Direct_Client_Name %in% oncalls$Client) %>%
arrange(Direct_Client_Name, Project_Id, YYYYMM, PM_Name)
ondf <- df %>%
filter(Direct_Client_Name %in% oncalls$Client) %>%
arrange(Direct_Client_Name, Project_Id, YYYYMM, PM_Name)
View(ondf)
write.xlsx2(ondf,
oncalls_filename,
sheetName = "Jobstarts",
showNA = FALSE,
append = TRUE)
oncalls_filename
oncalls_filename <- "C:/Users/alan.toppen/OneDrive/Documents/On-Call Contracts.xlsx"
write.xlsx2(ondf,
oncalls_filename,
sheetName = "Jobstarts",
showNA = FALSE,
append = TRUE)
sql <- "select * from Itd_profitability"
res <- dbSendQuery(conn, sql)
df <- dbFetch(res, n=-1) %>% tbl_df
ondf <- df %>%
filter(Dir_Client_Name %in% oncalls$Client) %>%
arrange(Dir_Client_Name, Proj_Id, YYYYMM, Proj_Mgr_Name)
View(ondf)
write.xlsx2(ondf,
oncalls_filename,
sheetName = "Profitability",
showNA = FALSE,
append = TRUE)
install.packages("shiny")
install.packages("installr")
installr()
lambda <- rep(0.2, 1000)
sample_size <- 40
sim <- lapply(lambda, function(x) rexp(sample_size, x))
sim
means <- sapply(sim, mean)
means
sds <- sapply(sim, sd)
sds
hist(sds)
df <- data.frame(vals=sds)
ggplot() +
geom_histogram(data = df,
mapping = aes(x=vals, y=..density..))
library(ggplot2)
df <- data.frame(vals=sds)
ggplot() +
geom_histogram(data = df,
mapping = aes(x=vals, y=..density..))
getPlot <- function(histx, df, plotlimits=seq(2,8)) {
dataframe <- data.frame(vals=histx)
ggplot() +
geom_histogram(data = dataframe,
mapping = aes(x=vals, y=..density..)) +
stat_function(data = data.frame(x=plotlimits),
mapping = aes(x),
fun = dchisq,
args = list(df=df),
color = "red")
}
getPlot(sds, sample_size - 1)
getPlot <- function(histx, df, plotlimits=seq(2,8)) {
dataframe <- data.frame(vals=histx)
ggplot() +
geom_histogram(data = dataframe,
mapping = aes(x=vals, y=..density..)) +
stat_function(data = data.frame(x=plotlimits),
mapping = aes(x),
fun = dchisq,
args = list(df=df),
color = "red")
}
getPlot(sds, 4)
x
x <- 1:100
manipulate( plot(x, dchisq(x, df)), df = slider(0,40,step=1))
library(manipulate)
manipulate( plot(x, dchisq(x, df)), df = slider(0,40,step=1))
manipulate( plot(x, dchisq(x, df), type="l"), df = slider(0,40,step=1))
y
y <- dchisq(x, 40)
mean(y)
df <- data.frame(vals=sds)
ggplot() +
geom_histogram(data = df,
mapping = aes(x=vals, y=..density..))
mean(sds)
sd(sds)
getPlot <- function(histx, mu, sigma, plotlimits=seq(2,8)) {
df <- data.frame(vals=histx)
ggplot() +
geom_histogram(data = df,
mapping = aes(x=vals, y=..density..)) +
stat_function(data = data.frame(x=plotlimits),
mapping = aes(x),
fun = dnorm,
args = list(mean=mu, sd=sigma),
color = "red")
}
theoretical_mean = 1/0.2
theoretical_sd = (1/0.2)/sqrt(sample_size)
getPlot(means, theoretical_mean, theoretical_sd)
getPlot(sds, 5, 1)
getPlot(sds, 4, 1)
getPlot(sds, 5, 1)
getPlot(sds-5, 0, 1)
theoretical_sd
theoretical_mean
```{r echo=FALSE, results='hide', message=FALSE}
library(ggplot2)
```
---
title: "Statistical Inference Course Project"
output: word_document
---
## Assignment
In this project you will investigate the exponential distribution in R and compare it with the Central Limit Theorem. The exponential distribution can be simulated in R with rexp(n, lambda) where lambda is the rate parameter. The mean of exponential distribution is 1/lambda and the standard deviation is also 1/lambda. Set lambda = 0.2 for all of the simulations. You will investigate the distribution of averages of 40 exponentials. Note that you will need to do a thousand simulations.
Illustrate via simulation and associated explanatory text the properties of the distribution of the mean of 40 exponentials.  You should
1. Show the sample mean and compare it to the theoretical mean of the distribution.
2. Show how variable the sample is (via variance) and compare it to the theoretical variance of the distribution.
3. Show that the distribution is approximately normal.
In point 3, focus on the difference between the distribution of a large collection of random exponentials and the distribution of a large collection of averages of 40 exponentials.
## Overview
This task demonstrates the central limit theorem, which states
the distribution of the sample means follows the
central limit theorem, with states:
* mean of sample means = xbar = population mean
* sd of sample means = s = population mean/sqrt(n)
* where n is the sample size
* and sample means are normally (gaussian) distributed
regardless of the population distribution, exponential in this case
We do this by obtaining 1,000 samples of sample size 40 from a population
exponentially distributed with lambda (rate) of 5. According to
[Wolfram MathWorld](http://mathworld.wolfram.com/ExponentialDistribution.html),
given a Poisson distribution with rate of change lambda, the distribution of waiting times between successive changes (with k=0) is exponentially
distributed with mean 1/lambda and standard deviation of 1/lambda.
Therefore, according to the central limit theorem, the distribution of
the means of the 1,000 samples should be normally distributed with mean
1/lambda and standard deviation (1/lambda)/sqrt(40).
With a lambda of 0.2, this translates to
mean = 5 and
sd = 5/6.25 = 0.8.
## Simulations
: Include English explanations of the simulations you ran, with the accompanying R code. Your explanations should make clear what the R code accomplishes.
The following code generates 1,000 samples of n=40 from an exponential
distribution with lambda = 0.2
``` {r}
lambda <- rep(0.2, 1000)
sample_size <- 40
sim <- lapply(lambda, function(x) rexp(sample_size, x))
```
The following code calculates the means and standard deviations of the sample means.
```{r}
means <- sapply(sim, mean) # vector of length 1,000 (length(means))
mean(means) # approx 1/lambda = 1/0.8 = 5
sd(means) # approx 5/sqrt(40) = 5/6.25 = 0.8
sds <- sapply(sim, sd)
vars <- sapply(sim, var)
mean(sds)
sd(sds)
```
## Sample Mean versus Theoretical Mean
: Include figures with titles. In the figures, highlight the means you are comparing. Include text that explains the figures and what is shown on them, and provides appropriate numbers.
```{r echo=FALSE, results='hide', message=FALSE}
# Function factory. DRY.
plotFunction <- function(fun, pl=seq(2,8)) {
function(histx, argslist, plotlimits=pl) {
df <- data.frame(vals=histx)
print(args)
ggplot() +
geom_histogram(data = df,
mapping = aes(x=vals, y=..density..)) +
stat_function(data = data.frame(x=plotlimits),
mapping = aes(x),
fun = fun, # dnorm, dchisq, dexp
args = argslist, # for different dist'ns
color = "red")
}
}
```
NEED TO SHOW THE DISTRIBUTION OF THE SAMPLE MEAN AND THE 95%
CONFIDENCE INTERVAL. SHOW THE POPULATION MEAN (KNOWN) FALLS WITHIN
THE 95% CONFIDENCE INTERVAL.
Maybe even show the forumula in mathematical notation.
The following code generates a histogram of the sample means overlaid with a
normal distribution with the theoretical mean and sd of the sample means.
```{r include=TRUE}
theoretical_mean_of_means = 1/0.2
theoretical_sd_of_means = (1/0.2)/sqrt(sample_size)
normPlot <- plotFunction(dnorm)
normPlot(means, list(mean=theoretical_mean_of_means, sd=theoretical_sd_of_means))
```
## Sample Variance versus Theoretical Variance
: Include figures (output from R) with titles. Highlight the variances you are comparing. Include text that explains your understanding of the differences of the variances.
NEED TO SHOW THE DISTRIBUTION OF THE SAMPLE VARIANCE AND THE 95%
CONFIDENCE INTERVAL. SHOW THE POPULATION VARIANCE (KNOWN) FALLS WITHIN
THE 95% CONFIDENCE INTERVAL.
Maybe even show the forumula in mathematical notation.
```{r include=TRUE}
theoretical_mean_of_sds = 1/0.2
theoretical_sd_of_sds = 1 # (1/0.2)/sqrt(sample_size)
expPlot <- plotFunction(dexp)
expPlot(sds[[10]], list(rate=0.2)) # underlying dist'n is exp
chisqPlot <- plotFunction(dchisq)
chisqPlot(x, list(df=39)) # this is nothing yet
```
## Distribution
: Via figures and text, explain how one can tell the distribution is approximately normal.
